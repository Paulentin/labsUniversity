package ua.nure.zabara.Practice4;

import java.io.*;
import java.util.ArrayList;

public class Part2 {



	static ArrayList<Integer> readenData;

	private static final String RAW_DATA = "part2.txt";

	private static final String SORTED_DATA = "part2_sorted.txt";

	private static final int N = 10;

	private static final int MAX = 50;



	static void read(String file){
		readenData=new ArrayList<>();
		BufferedReader br = null;

		try {
			br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
			String tmp = "";
			while ((tmp = br.readLine()) != null) {
				String[] s = tmp.split("\\s");
				for (String res : s) {
					readenData.add(Integer.parseInt(res));
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}



	static void write(String s,String fileName){

		File fl=new File(fileName);
		PrintWriter printWriter = null;

		if(!fl.exists()) {
			try {
				fl.createNewFile();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}


		try {
			printWriter=new PrintWriter(
					new BufferedWriter(new FileWriter(fl,false)));
			printWriter.print(s);

		}catch (IOException e) {
			e.printStackTrace();
		}finally {
			printWriter.close();
		}
	}


	public static String generate(){


		StringBuilder sb=new StringBuilder();
		for (int i = 0; i < N; i++) {
			sb.append((int)((Math.random()*MAX))+" ");
		}
		return sb.toString();
	}

	static void sortAndwrite(){

		if(!readenData.isEmpty()) {

			int n=readenData.size();
			int k;
			for (int m = n; m >= 0 ; m--) {
				for (int i = 0; i < n - 1; i++) {
					k=i+1;
					if(readenData.get(i)>readenData.get(i+1)){
						swap(i,k);
					}
				}
			}
		}
		StringBuilder sb=new StringBuilder();


		for (Integer i:readenData) {
			sb.append(i+System.lineSeparator());

		}
		write(sb.toString(),SORTED_DATA);
	}
	private static void swap(int i,int k){
		int temp;
		temp=readenData.get(i);
		readenData.set(i,readenData.get(k));
		readenData.set(k,temp);

	}


	public static void main(String[] args) {

		write(generate(),RAW_DATA);
		read(RAW_DATA);
		System.out.println("input ==> "+ readenData);
		sortAndwrite();
		System.out.println("output ==> "+ readenData);


	}

}